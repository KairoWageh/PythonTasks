1-

In multiple inheritance in python :
	


	class A:
    		def __init__(self):
        	print("A.__init__")

	class B(A):
    		def __init__(self):
        	print("B.__init__")
        	super().__init__()
    
	class C(A):
    		def __init__(self):
        	print("C.__init__")
        	super().__init__()


	class D(B,C):
    		def __init__(self):
        	print("D.__init__")
        	super().__init__()



	>>> from super_init import A,B,C,D
	>>> d = D()
		D.__init__
		B.__init__
		C.__init__
		A.__init__
 

     ==> Explanation:


	class D inherits from B and C and they inherit from A
	when we make an object from D 
		it calls its constructor first
		then the constructor of its direct parents starting from left(B) to right(C)
		finally the constructor of the parent of its parents
	


2-

class Employee is a child of both Human and Mammal
then it calls the method of the left class in its implementation

if code is:
	class Employee(Human,Mammal):

	==> it calls eat of Human

if code is:
	class Employee(Mammal,Human):

	==> it calls eat of Mammal
